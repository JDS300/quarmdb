import {z} from 'zod';
export const SpellsEnSchema= z.object({
aeduration: z.number(),
activated: z.number(),
castinganim: z.number(),
environmenttype: z.number(),
lighttype: z.number(),
noexpendreagent1: z.number(),
noexpendreagent2: z.number(),
noexpendreagent3: z.number(),
noexpendreagent4: z.number(),
recourselink: z.number(),
resistdiff: z.number(),
spellaffectindex: z.number(),
targetanim: z.number(),
timeofday: z.number(),
traveltype: z.number(),
ai_pt_bonus: z.number(),
aoerange: z.number(),
basediff: z.number(),
buffduration: z.number(),
buffdurationformula: z.number(),
cast_on_other: z.string().nullable().transform(e => { 
				if(e === null) return '';
				else return e;
			}),
cast_on_you: z.string().nullable().transform(e => { 
				if(e === null) return '';
				else return e;
			}),
cast_time: z.number(),
classes1: z.number(),
classes10: z.number(),
classes11: z.number(),
classes12: z.number(),
classes13: z.number(),
classes14: z.number(),
classes15: z.number(),
classes2: z.number(),
classes3: z.number(),
classes4: z.number(),
classes5: z.number(),
classes6: z.number(),
classes7: z.number(),
classes8: z.number(),
classes9: z.number(),
component_counts1: z.number(),
component_counts2: z.number(),
component_counts3: z.number(),
component_counts4: z.number(),
components1: z.number(),
components2: z.number(),
components3: z.number(),
components4: z.number(),
deities0: z.number(),
deities1: z.number(),
deities10: z.number(),
deities11: z.number(),
deities12: z.number(),
deities13: z.number(),
deities14: z.number(),
deities15: z.number(),
deities16: z.number(),
deities2: z.number(),
deities3: z.number(),
deities4: z.number(),
deities5: z.number(),
deities6: z.number(),
deities7: z.number(),
deities8: z.number(),
deities9: z.number(),
deleteable: z.number(),
descnum: z.number(),
disallow_sit: z.number(),
dot_stacking_exempt: z.number(),
effect_base_value1: z.number(),
effect_base_value10: z.number(),
effect_base_value11: z.number(),
effect_base_value12: z.number(),
effect_base_value2: z.number(),
effect_base_value3: z.number(),
effect_base_value4: z.number(),
effect_base_value5: z.number(),
effect_base_value6: z.number(),
effect_base_value7: z.number(),
effect_base_value8: z.number(),
effect_base_value9: z.number(),
effect_limit_value1: z.number(),
effect_limit_value10: z.number(),
effect_limit_value11: z.number(),
effect_limit_value12: z.number(),
effect_limit_value2: z.number(),
effect_limit_value3: z.number(),
effect_limit_value4: z.number(),
effect_limit_value5: z.number(),
effect_limit_value6: z.number(),
effect_limit_value7: z.number(),
effect_limit_value8: z.number(),
effect_limit_value9: z.number(),
effectdescnum: z.number(),
effectdescnum2: z.number(),
effectid1: z.number(),
effectid10: z.number(),
effectid11: z.number(),
effectid12: z.number(),
effectid2: z.number(),
effectid3: z.number(),
effectid4: z.number(),
effectid5: z.number(),
effectid6: z.number(),
effectid7: z.number(),
effectid8: z.number(),
effectid9: z.number(),
formula1: z.number(),
formula10: z.number(),
formula11: z.number(),
formula12: z.number(),
formula2: z.number(),
formula3: z.number(),
formula4: z.number(),
formula5: z.number(),
formula6: z.number(),
formula7: z.number(),
formula8: z.number(),
formula9: z.number(),
goodeffect: z.number(),
icon: z.number(),
id: z.number(),
mana: z.number(),
memicon: z.number(),
name: z.string().nullable().transform(e => { 
				if(e === null) return '';
				else return e;
			}),
new_icon: z.number(),
no_partial_resist: z.number(),
npc_no_cast: z.number(),
npc_no_los: z.number(),
other_casts: z.string().nullable().transform(e => { 
				if(e === null) return '';
				else return e;
			}),
player_1: z.string().nullable().transform(e => { 
				if(e === null) return '';
				else return e;
			}),
pushback: z.number(),
pushup: z.number(),
range: z.number(),
recast_time: z.number(),
recovery_time: z.number(),
resisttype: z.number(),
short_buff_box: z.number(),
skill: z.number(),
small_targets_only: z.number(),
spell_fades: z.string().nullable().transform(e => { 
				if(e === null) return '';
				else return e;
			}),
spellanim: z.number(),
targettype: z.number(),
teleport_zone: z.string().nullable().transform(e => { 
				if(e === null) return '';
				else return e;
			}),
typedescnum: z.number(),
uninterruptable: z.number(),
use_persistent_particles: z.number(),
you_cast: z.string().nullable().transform(e => { 
				if(e === null) return '';
				else return e;
			}),
zonetype: z.number(),
});
export type SpellsEnType = z.infer<typeof SpellsEnSchema>;
